plugins { id "com.jfrog.bintray" version "1.8.4" }

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

def artifactVersion = '0.0.5'
def artifactGroup = 'be.vanlooverenkoen'
def artifactName = 'riddle'

android {
    compileSdkVersion config.buildConfig.compileSdkVersion
    buildToolsVersion config.buildConfig.buildToolsVersion

    defaultConfig {
        minSdkVersion config.buildConfig.minSdkVersion
        targetSdkVersion config.buildConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    deps.implementation.each { name, dep ->
        implementation dep
    }

    deps.debugImplementation.each { name, dep ->
        debugImplementation dep
    }

    deps.betaImplementation.each { name, dep ->
        betaImplementation dep
    }

    deps.releaseImplementation.each { name, dep ->
        releaseImplementation dep
    }

    deps.annotationProcessors.each { name, dep ->
        kapt dep
    }

    deps.testing.each { name, dep ->
        testImplementation dep
        androidTestImplementation dep
    }
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    inputs.dir 'src/main/java'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

afterEvaluate {
    sourceJar.dependsOn assembleRelease
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'maven'
        name = 'riddle'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/vanlooverenkoen/Riddle'

        version {
            name = "$artifactVersion"
            desc = "Riddle is a logging library to send your logs to another app"
            released = new Date()
        }
    }
    publications = ['maven']
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Koen Van Looveren"
            email "vanlooverenkoen.dev@gmail.com"
            organization ""
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "$artifactGroup"
            artifactId "$artifactName"
            version "$artifactVersion"

            artifact("$buildDir/outputs/aar/riddle-release.aar")
            artifact sourceJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Riddle is a logging library to send your logs to another app')
                root.appendNode('name', 'riddle')
                root.appendNode('url', 'https://github.com/vanlooverenkoen/Riddle')
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if (it instanceof ExternalModuleDependency) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}